#!/bin/bash
#
# Driver script to do a mod release.
#
# Functions by pushing a tag in the form "vX.Y.Z[-(alpha|beta)]" to the mod repo
# GitHub CI handles the rest
#

OPTSTRING="hb:r:"
BRANCH=main
RELTYPE=""

usage_and_exit() {
    echo "Usage: release-mod [modname] [-b branch] [-r (alpha|beta)]"
    exit 1
}

# Option parsing
while getopts ${OPTSTRING} opt; do
    case ${opt} in
    h)
        usage_and_exit
        ;;
    b)
        BRANCH=$OPTARG
        if [ "$BRANCH" != main -a "$BRANCH" != */main ]; then
            echo "Invalid branch $BRANCH: must be a 'main' or '<ver>/main' branch!"
            usage_and_exit
        fi
        ;;
    r)
        RELTYPE=$OPTARG
        ;;
    :)
        echo "Option -${OPTARG} requires an argument."
        exit 1
        ;;
    ?)
        echo "Invalid option: -${OPTARG}."
        exit 1
        ;;
  esac
done
shift $((OPTIND-1))

# Try and auto-detect the mod name (if we're in a directory with a gradle.properties)
if [ -f gradle.properties ]; then
    DEFMOD=$(basename $(pwd))
else
    DEFMOD=""
fi
MOD=${1:-$DEFMOD}

if [ -z "$MOD" ]; then
    usage_and_exit
fi

tmpdir=$(mktemp -d)
cd $tmpdir
trap "rm -rf $tmpdir" EXIT
echo "Work directory: $tmpdir"

# Check out a fresh copy of the repo and go to the right branch
REPO=git@github.com:FTBTeam/$MOD
git clone $REPO.git || exit 1
cd $MOD
git checkout $BRANCH || exit 1

# Ensure this repo is set up for tag-based releases
workflow=.github/workflows/release.yml
grep -q "on:" $workflow && grep -q "push:" $workflow && grep -q "tags:" $workflow \
    && grep -q gradle/changelog.gradle build.gradle
if [ "$?" -ne 0 ]; then
    cat <<EOT

This repo is not set up for tag-based publishing!"

Ensure the top-level build.gradle includes:
  
  apply from: 'https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/changelog.gradle'

and the publishMods {} section defines:

  changelog = createChangelog(project)

and that .github/workflows/release.yml runs on a tag push:

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'
      - 'v[0-9]+\.[0-9]+\.[0-9]+-[a-z]+'
      - 'v[0-9]+\.[0-9]+\.[0-9]+-[a-z]+\.[0-9]+'

EOT

    exit 1
fi

# Determine the tag to be pushed from the gradle.properties and release type
test -z "$RELTYPE" || RELTYPE="-$RELTYPE"
ver=$(grep mod_version gradle.properties | cut -d= -f2 | sed -e 's/ //g')
tag="v$ver$RELTYPE"

# Ensure the tag doesn't already exist
existing=$(git tag -l $tag)
if [ ! -z "$existing" ]; then
    echo "ERROR: Tag '$tag' already exists in this repo! Check that:"
    echo "* You have updated 'mod_version' in gradle.properties"
    echo "* You have merged the 'dev' git branch into 'main'"
    exit 1
fi

# Summarise plan and get confirmation
echo ""
echo "Preparing a mod release for $MOD ($REPO - $BRANCH)"
echo "About to create git tag '$tag' and push it"
echo "This will trigger a Curseforge release for this version!"
while true; do
    read -p "Press 'y' to confirm, 'n' to cancel: " answer
    case $answer in 
    	y ) echo Continuing with tag push!;
    		break;;
    	n ) echo Cancelled!;
    		exit;;
    	* ) echo invalid response;;
    esac
done

# Do it!
git tag -am "$tag release" $tag \
    && git push origin --tags

echo "Complete!"
url=$(echo $REPO | sed -e 's!git@github\.com:!https://github.com/!')
echo "Workflow URL: $url/actions"
